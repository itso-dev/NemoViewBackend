<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="com.jamie.home.api.dao.CategoryDao">
    <sql id="categoryList">
        <if test="state != null">
            AND C.STATE = #{state}
            AND IFNULL(CCG.STATE,1) = #{state}
        </if>
        <if test="searchKeyword != null">
            <if test="searchType == 'name'.toString()">
                AND C.NAME LIKE CONCAT('%',#{searchKeyword},'%')
            </if>
            <if test="searchType == 'classification'.toString()">
                AND CC.NAME LIKE CONCAT('%',#{searchKeyword},'%')
            </if>
            <if test="searchType == 'keyword'.toString()">
                AND CK.NAME LIKE CONCAT('%',#{searchKeyword},'%')
            </if>
        </if>
    </sql>

    <select id="getListCategory" resultType="com.jamie.home.api.model.CATEGORY">
        SELECT *
        FROM CATEGORY
        WHERE 1=1
        <if test="state != null">
            AND STATE = #{state}
        </if>
        ORDER BY SEQ
        <if test="start != null">
            LIMIT #{start}, #{page_block}
        </if>
    </select>

    <select id="getListCategoryCnt" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM CATEGORY
        WHERE 1=1
        <if test="state != null">
            AND STATE = #{state}
        </if>
    </select>

    <select id="getCategoryWithKeyword" resultMap="CategoryMap">
        SELECT C.CATEGORY, C.NAME, C.SEQ, C.STATE ,C.ICON,
            CCG.GROUP AS CCG_GROUP, CC.CLASSIFICATION AS CC_CLASSIFICATION, CC.NAME AS CC_NAME, CCG.SEQ AS CC_SEQ, CCG.STATE AS CC_STATE,
            CK.KEYWORD AS CK_KEYWORD, CK.NAME AS CK_NAME
        FROM CATEGORY C
            LEFT JOIN CATEGORY_CLASSIFICATION_GROUP CCG on CCG.CATEGORY = C.CATEGORY
            LEFT JOIN CATEGORY_CLASSIFICATION CC on CCG.CLASSIFICATION = CC.CLASSIFICATION
            LEFT JOIN CATEGORY_KEYWORD CK on CC.CLASSIFICATION = CK.CLASSIFICATION
        WHERE C.CATEGORY = #{category}
        <if test="state != null">
            AND C.STATE = #{state}
            AND IFNULL(CCG.STATE,1) = #{state}
        </if>
        ORDER BY C.SEQ, CCG.SEQ, CK.KEYWORD
    </select>

    <select id="getCategoryWithKeywordList" resultMap="CategoryMap">
        SELECT C.CATEGORY, C.NAME, C.SEQ, C.STATE ,C.ICON,
            CCG.GROUP AS CCG_GROUP, CC.CLASSIFICATION AS CC_CLASSIFICATION, CC.NAME AS CC_NAME, CCG.SEQ AS CC_SEQ, CCG.STATE AS CC_STATE,
            CK.KEYWORD AS CK_KEYWORD, CK.NAME AS CK_NAME
        FROM CATEGORY C
            LEFT JOIN CATEGORY_CLASSIFICATION_GROUP CCG on CCG.CATEGORY = C.CATEGORY
            LEFT JOIN CATEGORY_CLASSIFICATION CC on CCG.CLASSIFICATION = CC.CLASSIFICATION
            LEFT JOIN CATEGORY_KEYWORD CK on CC.CLASSIFICATION = CK.CLASSIFICATION
        WHERE 1=1
        <include refid="categoryList"></include>
        ORDER BY C.SEQ, CCG.SEQ, CK.KEYWORD
    </select>

    <select id="getClassificationWithKeyword" resultMap="ClassificationMap">
        SELECT CC.CLASSIFICATION AS CC_CLASSIFICATION, CC.NAME AS CC_NAME,
            CK.KEYWORD AS CK_KEYWORD, CK.NAME AS CK_NAME
        FROM CATEGORY_CLASSIFICATION CC
            LEFT JOIN CATEGORY_KEYWORD CK on CC.CLASSIFICATION = CK.CLASSIFICATION
        WHERE CC.CLASSIFICATION = #{classification}
        ORDER BY CC.CLASSIFICATION, CK.KEYWORD
    </select>

    <select id="getClassificationWithKeywordList" resultMap="ClassificationMap">
        SELECT CC.CLASSIFICATION AS CC_CLASSIFICATION, CC.NAME AS CC_NAME,
            CK.KEYWORD AS CK_KEYWORD, CK.NAME AS CK_NAME
        FROM CATEGORY_CLASSIFICATION CC
            LEFT JOIN CATEGORY_KEYWORD CK on CC.CLASSIFICATION = CK.CLASSIFICATION
        WHERE 1=1
        <include refid="categoryList"></include>
        ORDER BY CC.CLASSIFICATION, CK.KEYWORD
    </select>

    <insert id="insertCategory" parameterType="com.jamie.home.api.model.CATEGORY" useGeneratedKeys="true" keyProperty="category">
        INSERT INTO CATEGORY
            (NAME, SEQ, STATE, ICON)
        VALUES
            (#{name}, #{seq}, #{state}, #{icon})
    </insert>

    <insert id="insertCategoryClassificationGroup">
        INSERT INTO CATEGORY_CLASSIFICATION_GROUP (CATEGORY, CLASSIFICATION, SEQ, STATE) VALUES (#{category}, #{classification}, #{seq}, #{state})
    </insert>

    <update id="updateClassificationGroup">
        UPDATE CATEGORY_CLASSIFICATION_GROUP SET
            CLASSIFICATION = #{classification}
            ,SEQ = #{seq}
            ,STATE = #{state}
            ,UPDDATE = NOW()
        WHERE 1=1
        AND `GROUP` = #{group}
    </update>

    <delete id="deleteClassificationGroups">
        DELETE FROM CATEGORY_CLASSIFICATION_GROUP WHERE CATEGORY = #{category} AND CLASSIFICATION IN (
        <foreach collection="delClassifications" item="classification" separator=",">
            #{classification.classification}
        </foreach>
        )
    </delete>

    <insert id="insertCategoryClassification" parameterType="com.jamie.home.api.model.CATEGORY_CLASSIFICATION" useGeneratedKeys="true" keyProperty="classification">
        INSERT INTO CATEGORY_CLASSIFICATION (NAME) VALUES (#{name})
    </insert>

    <insert id="insertCategoryNewKeywords">
        INSERT INTO CATEGORY_KEYWORD (CLASSIFICATION, NAME) VALUES
        <foreach collection="newKeywords" item="keyword" separator=",">
            (#{classification}, #{keyword.name})
        </foreach>
    </insert>

    <update id="updateCategory">
        UPDATE CATEGORY SET
            NAME = #{name}
            ,SEQ = #{seq}
            ,STATE = #{state}
            ,ICON = #{icon}
            ,UPDDATE = NOW()
        WHERE 1=1
            AND CATEGORY = #{category}
    </update>

    <delete id="deleteClassifications">
        DELETE FROM CATEGORY_CLASSIFICATION WHERE CLASSIFICATION IN (
        <foreach collection="delClassifications" item="classification" separator=",">
            #{classification.classification}
        </foreach>
        )
    </delete>

    <delete id="deleteKeywords">
        DELETE FROM CATEGORY_KEYWORD WHERE KEYWORD IN (
        <foreach collection="delKeywords" item="keyword" separator=",">
            #{keyword.keyword}
        </foreach>
        )
    </delete>

    <select id="listCategoryRank" resultType="com.jamie.home.api.model.CATEGORY">
        SELECT CATEGORY, COUNT(CATEGORY) AS CNT FROM REVIEW
        GROUP BY CATEGORY
        ORDER BY COUNT(CATEGORY) DESC
        LIMIT 8
    </select>

    <select id="listReviewKeywordRank" resultType="com.jamie.home.api.model.KEYWORD">
        SELECT CK.*, A.CNT
        FROM (
            SELECT KEYWORD, COUNT(KEYWORD) AS CNT  FROM REVIEW_KEYWORD
            GROUP BY KEYWORD
            ORDER BY COUNT(KEYWORD) DESC
            LIMIT 8
        ) A LEFT JOIN CATEGORY_KEYWORD CK ON CK.KEYWORD = A.KEYWORD
    </select>

    <select id="listQuestionKeywordRank" resultType="com.jamie.home.api.model.KEYWORD">
        SELECT CK.*, A.CNT
        FROM (
            SELECT KEYWORD, COUNT(KEYWORD) AS CNT  FROM QUESTION_KEYWORD
            GROUP BY KEYWORD
            ORDER BY COUNT(KEYWORD) DESC
            LIMIT 8
        ) A LEFT JOIN CATEGORY_KEYWORD CK ON CK.KEYWORD = A.KEYWORD
    </select>

    <select id="getKeyword" resultType="com.jamie.home.api.model.KEYWORD">
        SELECT * FROM CATEGORY_KEYWORD WHERE KEYWORD = #{keyword}
    </select>

    <update id="updateKeyword">
        UPDATE CATEGORY_KEYWORD SET NAME = #{name} WHERE KEYWORD = #{keyword}
    </update>

    <update id="updateClassification">
        UPDATE CATEGORY_CLASSIFICATION SET NAME = #{name},UPDDATE = NOW() WHERE CLASSIFICATION = #{classification}
    </update>

    <update id="updateMemberKeywords">
        UPDATE MEMBER SET KEYWORDS = GET_MEMBER_KEYWORD(MEMBER) WHERE 1=1
    </update>

    <update id="updateReviewKeywords">
        UPDATE REVIEW SET KEYWORDS = GET_REVIEW_KEYWORD(REVIEW, MEMBER) WHERE 1=1
    </update>

    <update id="updateQuestionKeywords">
        UPDATE QUESTION SET KEYWORDS = GET_QUESTION_KEYWORD(QUESTION, MEMBER) WHERE 1=1
    </update>

    <resultMap id="CategoryMap" type="com.jamie.home.api.model.CATEGORY">
        <result column="CATEGORY" property="category"/>
        <result column="NAME" property="name"/>
        <result column="SEQ" property="seq"/>
        <result column="STATE" property="state"/>
        <result column="ICON" property="icon"/>
        <collection property="classifications" ofType="com.jamie.home.api.model.CATEGORY_CLASSIFICATION">
            <result column="CCG_GROUP" property="group"/>
            <result column="CC_CLASSIFICATION" property="classification"/>
            <result column="CC_NAME" property="name"/>
            <result column="CC_SEQ" property="seq"/>
            <result column="CC_STATE" property="state"/>
            <collection property="keywords" ofType="com.jamie.home.api.model.CATEGORY_KEYWORD">
                <result column="CK_KEYWORD" property="keyword"/>
                <result column="CK_NAME" property="name"/>
            </collection>
        </collection>
    </resultMap>

    <resultMap id="ClassificationMap" type="com.jamie.home.api.model.CATEGORY_CLASSIFICATION">
        <result column="CC_CLASSIFICATION" property="classification"/>
        <result column="CC_NAME" property="name"/>
        <collection property="keywords" ofType="com.jamie.home.api.model.CATEGORY_KEYWORD">
            <result column="CK_KEYWORD" property="keyword"/>
            <result column="CK_NAME" property="name"/>
        </collection>
    </resultMap>
</mapper>