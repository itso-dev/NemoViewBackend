<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="com.jamie.home.api.dao.QuestionDao">
    <sql id="questionList">
        <if test="type != null">
            AND Q.TYPE = #{type}
        </if>
        <if test="state != null">
            AND Q.STATE = #{state}
        </if>
        <if test="questionMember != null">
            AND Q.MEMBER = #{questionMember}
        </if>
        <if test="answerMember != null">
            AND Q.QUESTION IN (SELECT QUESTION FROM QUESTION_ANSWER WHERE MEMBER = #{answerMember})
        </if>
        <if test="searchKeyword != null">
            <if test="searchType != null">
                <if test="searchType == 'question'.toString()">
                    AND Q.QUESTION LIKE CONCAT('%',#{searchKeyword},'%')
                </if>
                <if test="searchType == 'title'.toString()">
                    AND Q.TITLE LIKE CONCAT('%',#{searchKeyword},'%')
                </if>
                <if test="searchType == 'keyword'.toString()">
                    AND Q.KEYWORDS LIKE CONCAT('%"',#{searchKeyword},'"%')
                </if>
                <if test="searchType == 'nickname'.toString()">
                    AND M.NICKNAME LIKE CONCAT('%',#{searchKeyword},'%')
                </if>
            </if>
            <if test="searchType == null">
                AND (
                    Q.TITLE LIKE CONCAT('%',#{searchKeyword},'%') OR
                    Q.KEYWORDS LIKE CONCAT('%"',#{searchKeyword},'"%')
                )
            </if>
        </if>
        <if test="noAnswer">
            AND (SELECT COUNT(*) FROM QUESTION_ANSWER QA WHERE QA.QUESTION = Q.QUESTION AND CHOOSE = TRUE) = 0
        </if>
        <if test="helpAnswer">
            AND
            (
                SELECT CASE COUNT(*) WHEN 0 THEN FALSE ELSE TRUE END
                FROM MEMBER_KEYWORD MK
                    LEFT JOIN QUESTION_KEYWORD QK on QK.KEYWORD = MK.KEYWORD AND QK.QUESTION = Q.QUESTION
                WHERE MEMBER = #{member}
                    AND QKEYWORD IS NOT NULL
            )
        </if>

    </sql>
    <sql id="questionListOrder">
        ORDER BY
        <if test="orderType != null">
            <choose>
                <when test="orderType == 'reg_date_desc'.toString()">Q.REGDATE DESC, </when>
                <when test="orderType == 'hits_desc'.toString()">Q.HITS DESC, </when>
                <when test="orderType == 'point_desc'.toString()">Q.POINT DESC, </when>
                <when test="orderType == 'answer_desc'.toString()">ANSWER_CNT DESC, </when>
                <when test="orderType == 'report_desc'.toString()">REPORT_CNT DESC, </when>
            </choose>
        </if>
        <if test="helpAnswer">
            (
            SELECT COUNT(*)
            FROM MEMBER_KEYWORD MK
                LEFT JOIN QUESTION_KEYWORD QK on QK.KEYWORD = MK.KEYWORD AND QK.QUESTION = Q.QUESTION
            WHERE MEMBER = #{member}
                AND QKEYWORD IS NOT NULL
            ) DESC,
        </if>
        Q.QUESTION DESC
    </sql>
    <select id="getListQuestion" resultMap="QuestionMap">
        SELECT GET_QUESTION_KEYWORD(Q.QUESTION, Q.MEMBER) AS KEYWORDS, Q.*
            ,(SELECT COUNT(*) FROM QUESTION_ANSWER QA WHERE QA.QUESTION = Q.QUESTION AND CHOOSE = TRUE) AS ANSWER_YN
            ,(SELECT COUNT(*) FROM QUESTION_ANSWER QA WHERE QA.QUESTION = Q.QUESTION) AS ANSWER_CNT
            ,(SELECT COUNT(*) FROM REPORT WHERE TYPE = '3' AND `KEY` = Q.QUESTION) AS REPORT_CNT
            ,(SELECT COUNT(*) FROM QUESTION_LIKE QL WHERE QL.QUESTION = Q.QUESTION) AS LIKE_CNT
            , M.MEMBER AS MEMBER_MEMBER
            , M.PROFILE AS MEMBER_PROFILE
            , M.NAME AS MEMBER_NAME
            , M.NICKNAME AS MEMBER_NICKNAME
        <if test="member != null">
            ,(SELECT COUNT(*) FROM QUESTION_MEMBER_NEW QMN WHERE QMN.QUESTION = Q.QUESTION AND QMN.MEMBER = #{member} )AS SHOW_NEW
        </if>
        FROM QUESTION Q
            LEFT JOIN MEMBER M on Q.MEMBER = M.MEMBER
        WHERE 1=1
        <include refid="questionList"></include>
        <include refid="questionListOrder"></include>
        <if test="start != null">
            LIMIT #{start}, #{page_block}
        </if>
    </select>

    <select id="getListQuestionCnt" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM QUESTION Q
            LEFT JOIN MEMBER M on Q.MEMBER = M.MEMBER
        WHERE 1=1
        <include refid="questionList"></include>
    </select>

    <select id="getQuestion" resultMap="QuestionMap">
        SELECT GET_QUESTION_KEYWORD(Q.QUESTION, Q.MEMBER) AS KEYWORDS, Q.*
            ,(SELECT COUNT(*) FROM QUESTION_ANSWER QA WHERE QA.QUESTION = Q.QUESTION AND CHOOSE = TRUE) AS ANSWER_YN
            ,(SELECT COUNT(*) FROM QUESTION_ANSWER QA WHERE QA.QUESTION = Q.QUESTION) AS ANSWER_CNT
            ,(SELECT COUNT(*) FROM QUESTION_LIKE QL WHERE QL.QUESTION = Q.QUESTION) AS LIKE_CNT
            , M.MEMBER AS MEMBER_MEMBER
            , M.PROFILE AS MEMBER_PROFILE
            , M.NAME AS MEMBER_NAME
            , M.NICKNAME AS MEMBER_NICKNAME
        <if test="member != null">
            ,(SELECT COUNT(*) FROM QUESTION_MEMBER_NEW QMN WHERE QMN.QUESTION = Q.QUESTION AND QMN.MEMBER = #{member} )AS SHOW_NEW
        </if>
        FROM QUESTION Q
            LEFT JOIN MEMBER M on Q.MEMBER = M.MEMBER
        WHERE 1=1
            AND QUESTION = #{question}
    </select>

    <update id="updateQuestionHits">
        UPDATE QUESTION SET
            HITS = HITS + 1
        WHERE QUESTION = #{question}
    </update>

    <insert id="insertQuestion" parameterType="com.jamie.home.api.model.QUESTION" useGeneratedKeys="true" keyProperty="question">
        INSERT INTO QUESTION
            (MEMBER, TYPE, TITLE, CONTENT, NOKEYWORD, POINT, STATE, KEYWORDS, FILES)
        VALUES
            (#{member}, #{type}, #{title}, #{content}, #{nokeyword}, #{point}, #{state}, #{keywords}, #{files})
    </insert>

    <update id="updateQuestion">
        UPDATE QUESTION SET
            TYPE = #{type}
            ,TITLE = #{title}
            ,CONTENT = #{content}
            ,NOKEYWORD = #{nokeyword}
            ,POINT = #{point}
            ,STATE = #{state}
            ,KEYWORDS = #{keywords}
            ,FILES = #{files}
            ,UPDDATE = now()
        WHERE QUESTION = #{question}
    </update>

    <select id="getListQuestionAnswer" resultMap="AnswerMap">
        SELECT QA.*
            , M.MEMBER AS MEMBER_MEMBER
            , M.PROFILE AS MEMBER_PROFILE
            , M.NAME AS MEMBER_NAME
            , M.NICKNAME AS MEMBER_NICKNAME
            , GET_MEMBER_KEYWORD(M.MEMBER) AS MEMBER_KEYWORDS
            ,(SELECT COUNT(*) FROM QUESTION_ANSWER_LIKE QAL WHERE QAL.ANSWER = QA.ANSWER) AS LIKE_CNT
        <if test="member != null">
            ,(SELECT COUNT(*) FROM QUESTION_ANSWER_LIKE QAL WHERE QAL.ANSWER = QA.ANSWER AND QAL.MEMBER = #{member}) LIKE_YN
        </if>
        FROM QUESTION_ANSWER QA
            LEFT JOIN MEMBER M on QA.MEMBER = M.MEMBER
        WHERE 1=1
            AND QA.QUESTION = #{question}
            <if test="answerMember != null">
                AND QA.MEMBER = #{answerMember}
            </if>
            <if test="answer_key == null">
                AND QA.ANSWER_KEY IS NULL
            </if>
            <if test="answer_key != null">
                AND QA.ANSWER_KEY = #{answer_key}
            </if>
        ORDER BY QA.ANSWER DESC
    </select>

    <select id="getListQuestionAnswerCnt" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM QUESTION_ANSWER
        WHERE 1=1
            AND QUESTION = #{question}
        <if test="answer_key == null">
            AND ANSWER_KEY IS NULL
        </if>
        <if test="answer_key != null">
            AND ANSWER_KEY = #{answer_key}
        </if>
    </select>

    <insert id="insertQuestionAnswer">
        INSERT INTO QUESTION_ANSWER (
            QUESTION, MEMBER, CONTENT, FILES
        <if test="answer_key != null">
            , ANSWER_KEY
        </if>
        )
        VALUES (
            #{question}, #{member}, #{content}, #{files}
        <if test="answer_key != null">
            , #{answer_key}
        </if>
        )
    </insert>

    <update id="updateQuestionAnswerChoose">
        UPDATE QUESTION_ANSWER SET
            CHOOSE = !CHOOSE
            ,UPDDATE = now()
        WHERE ANSWER = #{answer}
    </update>

    <update id="updateQuestionState">
        UPDATE QUESTION SET STATE = #{state} WHERE QUESTION = #{question}
    </update>

    <insert id="insertQuestionKeywrod">
        INSERT INTO QUESTION_KEYWORD (QUESTION, KEYWORD) VALUES
        <foreach collection="review_keywords" item="keyword" separator=",">
            (#{question}, #{keyword.keyword})
        </foreach>
    </insert>

    <delete id="deleteAllQuestionKeywrod">
        DELETE FROM QUESTION_KEYWORD WHERE QUESTION = #{question}
    </delete>

    <select id="getAnswer" resultType="com.jamie.home.api.model.QUESTION_ANSWER">
        SELECT *
        FROM QUESTION_ANSWER
        WHERE 1=1
            AND ANSWER = #{answer}
    </select>

    <delete id="deleteAnswer">
        DELETE FROM QUESTION_ANSWER WHERE ANSWER = #{answer}
    </delete>

    <select id="getQuestionLike" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM QUESTION_LIKE WHERE QUESTION = #{question} AND MEMBER = #{member}
    </select>

    <insert id="insertQuestionLike">
        INSERT INTO QUESTION_LIKE (QUESTION, MEMBER) VALUES (#{question}, #{member})
    </insert>

    <delete id="deleteQuestionLike">
        DELETE FROM QUESTION_LIKE WHERE QUESTION = #{question} AND MEMBER = #{member}
    </delete>

    <select id="getQuestionAnswerLike" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM QUESTION_ANSWER_LIKE WHERE ANSWER = #{answer} AND MEMBER = #{member}
    </select>

    <insert id="insertQuestionAnswerLike">
        INSERT INTO QUESTION_ANSWER_LIKE (ANSWER, MEMBER) VALUES (#{answer}, #{member})
    </insert>

    <delete id="deleteQuestionAnswerLike">
        DELETE FROM QUESTION_ANSWER_LIKE WHERE ANSWER = #{answer} AND MEMBER = #{member}
    </delete>

    <insert id="insertQuestionMemberNew">
        INSERT INTO QUESTION_MEMBER_NEW (QUESTION, MEMBER) VALUES (#{question}, #{member})
    </insert>

    <select id="getQuestionMemberNew" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM QUESTION_MEMBER_NEW WHERE QUESTION = #{question} AND MEMBER = #{member}
    </select>

    <resultMap id="QuestionMap" type="com.jamie.home.api.model.QUESTION">
        <result column="QUESTION" property="question"/>
        <result column="MEMBER" property="member"/>
        <result column="TYPE" property="type"/>
        <result column="TITLE" property="title"/>
        <result column="CONTENT" property="content"/>
        <result column="HITS" property="hits"/>
        <result column="NOKEYWORD" property="nokeyword"/>
        <result column="POINT" property="point"/>
        <result column="STATE" property="state"/>
        <result column="KEYWORDS" property="keywords"/>
        <result column="FILES" property="files"/>
        <result column="REGDATE" property="regdate"/>
        <result column="UPDDATE" property="upddate"/>
        <result column="ANSWER_YN" property="answerYn"/>
        <result column="ANSWER_CNT" property="answerCnt"/>
        <result column="REPORT_CNT" property="reportCnt"/>
        <result column="LIKE_CNT" property="likeCnt"/>
        <result column="SHOW_NEW" property="showNew"/>
        <association property="memberVO" column="MEMBER" javaType="com.jamie.home.api.model.MEMBER">
            <result column="MEMBER_PROFILE" property="profile"/>
            <result column="MEMBER_NAME" property="name"/>
            <result column="MEMBER_NICKNAME" property="nickname"/>
            <result column="MEMBER_KEYWORDS" property="keywords"/>
        </association>
    </resultMap>

    <resultMap id="AnswerMap" type="com.jamie.home.api.model.QUESTION_ANSWER">
        <result column="ANSWER" property="answer"/>
        <result column="QUESTION" property="question"/>
        <result column="MEMBER" property="member"/>
        <result column="CONTENT" property="content"/>
        <result column="CHOOSE" property="choose"/>
        <result column="FILES" property="files"/>
        <result column="LIKE_CNT" property="likeCnt"/>
        <result column="LIKE_YN" property="likeYn"/>
        <association property="memberVO" column="MEMBER" javaType="com.jamie.home.api.model.MEMBER">
            <result column="MEMBER_PROFILE" property="profile"/>
            <result column="MEMBER_NAME" property="name"/>
            <result column="MEMBER_NICKNAME" property="nickname"/>
            <result column="MEMBER_KEYWORDS" property="keywords"/>
        </association>
    </resultMap>
</mapper>